<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cgo on zznQ</title><link>https://zznq.imipy.com/tags/cgo/</link><description>Recent content in cgo on zznQ</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 17 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://zznq.imipy.com/tags/cgo/index.xml" rel="self" type="application/rss+xml"/><item><title>cgo &amp; objc</title><link>https://zznq.imipy.com/posts/cgoobjc/</link><pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate><guid>https://zznq.imipy.com/posts/cgoobjc/</guid><description>我尝试用 golang 编写一些核心代码，再利用 cgo 的特性将其打包成 dylib 文件，以便于我在objc 中调用（因为我 objc 写的很烂）。
先写个很简单的 cgo 程序 main.go ：
package main //void HelloWorld(); import &amp;#34;C&amp;#34; import &amp;#34;fmt&amp;#34; //export HelloWorld func HelloWorld() { fmt.Println(&amp;#34;Hello World!!!&amp;#34;) } func main() {} 代码中有几个地方需要注意下：
import &amp;quot;C&amp;quot; 语句则表示开启了CGO特性 //export HelloWorld CGO 指令将其导出为C语言函数 编译为dylib动态库： $ go build -buildmode=c-shared--ldflags=&amp;quot;-w -s&amp;quot; -o cgodemo.dylib cgoDemo/main.go
查看下文件信息：
$ file cgodemo.dylib cgodemo.dylib: Mach-O 64-bit dynamically linked shared library x86_64 $ otool -L cgodemo.</description></item></channel></rss>