<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>zznQ</title><link>https://zznq.imipy.com/</link><description>Recent content on zznQ</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 04 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://zznq.imipy.com/index.xml" rel="self" type="application/rss+xml"/><item><title>记录一次破解[macOS]Typora失败的经历</title><link>https://zznq.imipy.com/posts/failed-to-crack-typora/</link><pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate><guid>https://zznq.imipy.com/posts/failed-to-crack-typora/</guid><description>在破解Bartender4后没多久躁动地心又开始了这次就尝试破解macOS下的Typora，顺便记录一下。
搜索相关文章看到成功破解 Win、Linux(Electron)的文章以及工具： https://blog.shi1011.cn/rev/1891 https://github.com/Mas0nShi/typoraCracker 文章中分析（win｜linux）addLicense 流程如下，macOS 上使用原生 webkit 开发，估计思路差不多：
直接打开 Hopper 分析搜索 License 找到了 LicenseManager 类：
看到一个关键字为 activate 的方法，签名如下：
/* @class LicenseManager */ -(void)activate:(void *)arg2 with:(void *)arg3 force:(char)arg4 callback:(void *)arg5 { /* - arg2 -&amp;gt; email - arg3 -&amp;gt; license - arg4 -&amp;gt; force - arg5 -&amp;gt; callback */ 分析 LicenseManager.activate 其方法流程：
但是我不知道传入的 callback 是什么，为了搞清楚整个流程，想使用 firda 来打印下activate传入的参数：
$ frida-trace -i &amp;#34;activate*&amp;#34; Typora Attaching... [1] 4229 killed frida-trace -i &amp;#34;activate*&amp;#34; Typora 进程直接被杀掉了 emmm 算逑！继续静态分析吧。</description></item><item><title>IOS快捷指令+Github Actions更新心率</title><link>https://zznq.imipy.com/posts/ios-push-heartbeats-to-github-with-actions/</link><pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate><guid>https://zznq.imipy.com/posts/ios-push-heartbeats-to-github-with-actions/</guid><description>如何使用API主动触发？
在 docs.github.com 中找到了手动触发的接口。
在Github Settings 处（即 https://github.com/settings/tokens ）申请Tokens，放置API header 中 Authorization: token {{your token}}
在仓库根目录下创建 .github/workflows/heartbeat.yml 文件：
name: HeartBeat on: workflow_dispatch: inputs: value: description: &amp;#39;value&amp;#39; required: false jobs: sync: name: Build runs-on: ubuntu-latest steps: - name: Test-on-01 run: | echo ${{ github.event.inputs.value }} 请求接口（以我的仓库为例）： curl \ -X POST \ -H &amp;#34;Accept: application/vnd.</description></item><item><title>逆向获取 MacOS WeChat App 聊天数据库密钥小记</title><link>https://zznq.imipy.com/posts/wechat-sqlite-key/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><guid>https://zznq.imipy.com/posts/wechat-sqlite-key/</guid><description>突然想解密下 WeChat 本地聊天数据库 ，这些 msg_*.db 文件一般存在 ~/Library/Containers/com.tencent.xinWeChat/Data/Library/Application\ Support/com.tencent.xinWeChat/2.*******/123812fsdhg1232333sd/Message/ 目录下
google 发现一个教程：https://github.com/allen1881996/WeChat-Data-Analysis 测试后发现这个操作是可行的。大概步骤如下：通过 lldb 动态调试对 sqlite3_key 函数断点后再读取 $rsi 寄存器的值，进行简单拼接即得到了 sqlite3 raw-key。
但是心中出现了两个疑问：
为什么是 sqlite3_key? Tencent有个开源项目 wcdb 是基于SQLite的，加密使用的是开源的 SQLCipher sqlite3_key 函数就是设置加密数据库的。wcdb 将其封装在了 setCipherKey 方法下。
memory read --size 1 --format x --count 32 $rsi 是啥意思？ x86-64 中函数调用时的参数存储如下寄存器中: %rdi, %rsi, %rdx, %rcx, %r8, %r9 六个寄存器用于存储函数调用时的6个参数（如果有6个或6个以上参数的话）。
%rsi 寄存器存储的为第二个参数，即对应 int sqlite3_key(sqlite3 *db, const void *pKey, int nKey); 中 key 。
如何能通过静态的方式获取到 key 呢？ 根据 WCDB 的线索继续摸索，找到在哪里执行 setCipherKey</description></item><item><title>golang web audit 小记</title><link>https://zznq.imipy.com/posts/golang-web-audit/</link><pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate><guid>https://zznq.imipy.com/posts/golang-web-audit/</guid><description>&lt;p>简单记录下Golang web代码审计。&lt;/p></description></item><item><title>cgo &amp; objc</title><link>https://zznq.imipy.com/posts/cgoobjc/</link><pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate><guid>https://zznq.imipy.com/posts/cgoobjc/</guid><description>我尝试用 golang 编写一些核心代码，再利用 cgo 的特性将其打包成 dylib 文件，以便于我在objc 中调用（因为我 objc 写的很烂）。
先写个很简单的 cgo 程序 main.go ：
package main //void HelloWorld(); import &amp;#34;C&amp;#34; import &amp;#34;fmt&amp;#34; //export HelloWorld func HelloWorld() { fmt.Println(&amp;#34;Hello World!!!&amp;#34;) } func main() {} 代码中有几个地方需要注意下：
import &amp;quot;C&amp;quot; 语句则表示开启了CGO特性 //export HelloWorld CGO 指令将其导出为C语言函数 编译为dylib动态库： $ go build -buildmode=c-shared--ldflags=&amp;quot;-w -s&amp;quot; -o cgodemo.dylib cgoDemo/main.go
查看下文件信息：
$ file cgodemo.dylib cgodemo.dylib: Mach-O 64-bit dynamically linked shared library x86_64 $ otool -L cgodemo.</description></item><item><title>cel-go 初探</title><link>https://zznq.imipy.com/posts/cel-go-demo/</link><pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate><guid>https://zznq.imipy.com/posts/cel-go-demo/</guid><description>之前看到 Xray - 如何编写expression表达式 提到这个库 https://github.com/google/cel-spec
正好工作方面也遇到这个需求了，就来简单的研究下，先看下相关资料：
cel-spec 介绍 cel-go github cel-go 入门文档 cel 是建立 protocol 之上的。
在 demo 项目下创建 fprint 包；并在其目录下创建 fprint.proto 文件
syntax = &amp;#34;proto3&amp;#34;;package fprint; // https://developers.google.com/protocol-buffers/docs/proto3#packages option go_package = &amp;#34;fprint/bp&amp;#34;; // golang package 包名 message Response { string url = 1; int32 status = 2 ; map&amp;lt;string, string&amp;gt; headers = 3; string content_type = 4; string title = 5; bytes body = 6; string md5 = 7;}使用 $ protoc --go_out=.</description></item><item><title>MacOS - Electron 应用分析小记</title><link>https://zznq.imipy.com/posts/macos-electron-analysis/</link><pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate><guid>https://zznq.imipy.com/posts/macos-electron-analysis/</guid><description>查看包内容，在Resources 目录下找到 app.asar 文件
解压 app.asar 文件
$ npm install asar -g $ cd /Applications/AppName.app/Contents/Resources $ asar e app.asar appCore 进入到与app.asar.unpacked的同级目录下，不然会有如下错误：https://github.com/electron/asar/issues/37
解包之后目录如下
ls -lahrt total 8 drwxr-xr-x@ 64 staff 2.0K May 4 11:09 .. -rw-r--r-- 1 staff 984B May 4 11:09 package.json drwxr-xr-x 3 staff 96B May 4 11:09 dist drwxr-xr-x 5 staff 160B May 4 11:09 . drwxr-xr-x 166 staff 5.2K May 4 11:09 node_modules 源码在 dist/electron 下；一般这里的 js 都是经过混淆，逻辑需要进行具体的分析&amp;hellip;</description></item><item><title>MacOS App Insert dylib 小记</title><link>https://zznq.imipy.com/posts/macos-app-insert-dylib/</link><pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate><guid>https://zznq.imipy.com/posts/macos-app-insert-dylib/</guid><description>MacOS 下的 app 不是一个可执行文件而是一个 Application Bundle，而 Bundle 就是一个遵循特定结构的目录，包含 Info.plist、可执行文件、资源、Framworks 等内容，其中 Info.plist 和 Executable 是必要的。
来看下 WeChat.app Bundle 的目录结构，先忽略 Framworks、Resources 等：
WeChat.app ├── Contents │ └── MacOS │ └── WeChat │ └── Info.plist 了解关键文件信息 - 知彼知己 Info.plist 查看官网文档关于Info.plist 的介绍中，有一句很关键话：
The way an app provides its metadata to the system is through the use of a special file called an information property list file, or Info.plist for short.
使用 plutil 查看 Info.</description></item><item><title>Linux ptrace机制初探</title><link>https://zznq.imipy.com/posts/linux-ptrace-learning/</link><pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate><guid>https://zznq.imipy.com/posts/linux-ptrace-learning/</guid><description>补充下基础知识 动态加载 动态加载Dynamic Loading：是一种程序运行机制，能让计算机程序在运行时（而不是编译时）装载库（或者其他二进制对象）到内存中，然后检索库中函数和变量的地址，并运行这些函数或访问这些变量，且能在不需要时将库从内存中卸载。
linux下的/proc虚拟文件系统 Linux 内核提供了一种通过 /proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。proc文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。
/proc/&amp;lt;PID&amp;gt;/status / /proc/&amp;lt;PID&amp;gt;/stat： 查看进程信息 /proc/&amp;lt;PID&amp;gt;/maps：进程关联到的每个可执行文件和库文件在内存中的映射区域及其访问权限所组成的列表 /proc/self/maps： 当前进程的内存映射关系，通过读该文件的内容可以得到内存代码段基址。 什么是 Ptrace？ 通过使用 ptrace（名称是 &amp;ldquo;process trace&amp;rdquo; 的缩写），一个进程可以控制另一个进程，从而使控制器能够检查和操纵目标的内部状态。
linux ptrace 函数提供了许多有用的调试操作：
PTRACE_ATTACH 允许一个进程将自身附加到另一个进程进行调试，从而暂停远程进程。 PTRACE_PEEKTEXT 允许从另一个进程地址空间读取内存。 PTRACE_POKETEXT 允许将内存写入另一个进程地址空间。 PTRACE_GETREGS 从进程中读取当前的处理器寄存器集。 PTRACE_SETREGS 写入进程的当前处理器寄存器集。 PTRACE_CONT 恢复附加进程的执行。 PTRACE_DETACH 是重新启动操作；它要求目标进程处于 ptrace-stop 中。 函数签名：
long ptrace(enum __ptrace_request request, pid_t pid, void *addr, void *data); 🌰 （Linux ubuntu 4.15.0-112-generic x86_64）:
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;sys/wait.h&amp;gt;#include &amp;lt;sys/ptrace.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;sys/user.h&amp;gt; int main(int argc, char **argv) { int child_pid; child_pid = fork(); if (child_pid == 0) { // `PTRACE_TRACEME` 本进程将被其父进程跟踪(此时剩下的`pid、addr、data`参数都没有实际意义可以全部为 0)。 ptrace(PTRACE_TRACEME, 0, 0, 0); execl(&amp;#34;/bin/ls&amp;#34;,&amp;#34;ls&amp;#34;,NULL); //执行系统调用 } else { struct user_regs_struct regs; wait(NULL); printf(&amp;#34;child process was stopped .</description></item><item><title>被动扫描器HTTP(S)代理初探</title><link>https://zznq.imipy.com/posts/passive-scanner-https-proxy/</link><pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate><guid>https://zznq.imipy.com/posts/passive-scanner-https-proxy/</guid><description>如何代理 http(s) 流量 HTTP 代理的协议基于 HTTP，因此 HTTP 代理本身就是一个 HTTP 的服务，而其工作原理本质上就是中间人（MITM) ，即读取当前客户端的 HTTP 请求，从代理发送出去并获得响应，然后将响应返回给客户端。
使用 netcat -lv -p 8881 监听 127.0.0.1:8881
访问 http://**.** nc 的数据包为: GET http://hyuga.co/ HTTP/1.1 Host: hyuga.co Proxy-Connection: keep-alive Pragma: no-cache Cache-Control: no-cache Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: http://hyuga.co/ Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9 ... 访问 https://**.** nc 的数据包为: CONNECT github.com:443 HTTP/1.1 Host: github.com:443 Proxy-Connection: keep-alive User-Agent: Mozilla/5.0 golang 实现 http(s) 代理服务器 使用隧道直接双向复制 https 数据</description></item><item><title>前端入门小记</title><link>https://zznq.imipy.com/posts/frontend-learning/</link><pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate><guid>https://zznq.imipy.com/posts/frontend-learning/</guid><description>虽然之前有用 React 编写了 Hyuga 的前端，但是都是靠的 google + github 解决的，认知很浅。
前端基础 https://developer.mozilla.org/zh-CN/ 别说了就是多看文档
HTML 块级元素 自占一行 内联元素的大小就是被包裹元素的大小 &amp;lt;head&amp;gt; 中的 &amp;lt;base target=&amp;quot;_blank&amp;quot; /&amp;gt; 定义所有的链接属性 CSS 基础 https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference#%E5%85%B3%E9%94%AE%E5%AD%97%E7%B4%A2%E5%BC%95
载入 CSS 的几种方法 内联 inline Style 标签 独立文件 css 选择器 https://segmentfault.com/a/1190000013424772
常用的选择器：
元素选择器
p{...} div{...} 等
类选择器
.class_name{...}
ID 选择器 #id_name{...}
属性选择器
a[id=&amp;quot;xxx&amp;quot;]{...}
伪元素选择器
.content::after{...}
伪类选择器</description></item></channel></rss>